openapi: 3.0.0
info:
  title: resell
  version: '1.0'
  description: Web application API with the primary function to serve as a platform for selling and buying used items.
  contact:
    name: Andreas Scheipers
    url: 'https://scheipe.rs'
    email: andreas@scheipe.rs
  termsOfService: 'https://api.scheipe.rs/tos/resell/v1'
  license:
    url: 'https://www.gnu.org/licenses/old-licenses/gpl-2.0.html'
    name: GPLv2
servers:
  - url: 'https://api.scheipe.rs/resell/v1'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: string
          format: uuid
          example: da3352ac-4f2d-4828-8371-a90c36cc3c33
        name: userId
        in: path
        required: true
    get:
      summary: Show User Details
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/User.Show.v1.yaml
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/Error.Show.v1.yaml
              examples: {}
      operationId: get-users-userId
      description: Show the details of a specific user.
  /users:
    post:
      summary: Create New User
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Base.Show.v1.yaml
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/Error.Show.v1.yaml
              examples:
                example-1:
                  value:
                    errorCode: E100
                    errorMessage: User with this data already exists.
      operationId: post-users
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/User.Create.v1.yaml
      description: Allows users to register and provide their personal information.
  /login:
    post:
      summary: Login With User Credentials
      tags: []
      operationId: post-login
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - properties:
                    alias:
                      type: string
                      example: john98
                    password:
                      type: string
                      format: password
                      example: 1234;)
                  required:
                    - alias
                    - password
                - properties:
                    email:
                      type: string
                      format: email
                      example: john.doe@example.com
                    password:
                      type: string
                      format: password
                      example: 1234;)
                  required:
                    - email
                    - password
              type: object
        description: Login information of a user. A password and either an alias or an email.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 59a371548df78103099830fe60804077f6ee33d4
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/Error.Show.v1.yaml
              examples:
                example-1:
                  value:
                    errorCode: E101
                    errorMessage: Wrong credentials!
      description: Allows users to login with a password and either an alias or an email.
      security: []
  /postings:
    get:
      summary: Search and List Postings
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Posting.Show.v1.yaml
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/Error.Show.v1.yaml
      operationId: get-postings
      description: List of postings.
      parameters:
        - schema:
            type: string
          in: query
          name: category
          description: Category name of a posting.
        - schema:
            type: string
          in: query
          name: location
          description: Location of a posting.
        - schema:
            type: string
          in: query
          name: date
          description: Creation date of a posting.
    post:
      summary: Create New Posting
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Posting.Show.v1.yaml
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/Error.Show.v1.yaml
      operationId: post-postings
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Posting.Create.v1.yaml
        description: ''
      description: Create a new posting.
  '/postings/{postingId}':
    parameters:
      - schema:
          type: string
          format: uuid
          example: 2537b7df-9852-4920-a255-9b597d30bb18
        name: postingId
        in: path
        required: true
        description: The ID of a specific posting.
    get:
      summary: Show Posting Details
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Posting.Show.v1.yaml
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/Error.Show.v1.yaml
      operationId: get-postings-postingId
      description: Detailed view of a posting.
    delete:
      summary: Delete Existing Posting
      tags: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/Error.Show.v1.yaml
      operationId: delete-postings-postingId
      description: Delete a specific posting.
    put:
      summary: Update Existing Posting
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Posting.Show.v1.yaml
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/Error.Show.v1.yaml
      operationId: put-postings-postingId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Posting.Create.v1.yaml
      description: Update posting information.
    patch:
      summary: Update Existing Posting
      tags: []
      operationId: patch-postings-postingId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Posting.Show.v1.yaml
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/Error.Show.v1.yaml
              examples: {}
      description: Update posting information.
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: ../models/Posting.Update.v1.yaml
  '/postings/{postingId}/images':
    parameters:
      - schema:
          type: string
        name: postingId
        in: path
        required: true
        description: The ID of a specific posting.
    get:
      summary: Posting Image List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/PostingImage.Show.v1.yaml
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/Error.Show.v1.yaml
      operationId: get-postings-postingId-images
      description: List of posting images.
    post:
      summary: Upload New Image
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/PostingImage.Show.v1.yaml
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/Error.Show.v1.yaml
      operationId: post-postings-postingId-images
      description: Upload a new image for a posting.
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        description: Binary file of an image.
  '/postings/{postingId}/images/{imageId}':
    parameters:
      - schema:
          type: string
        name: postingId
        in: path
        required: true
        description: The ID of a specific posting.
      - schema:
          type: string
        name: imageId
        in: path
        required: true
        description: The ID of a specific posting image.
    get:
      summary: Posting Image Detail View
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/PostingImage.Show.v1.yaml
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/Error.Show.v1.yaml
      operationId: get-postings-postingId-images-imageId
      description: Detailed view of a specific posting image.
    delete:
      summary: Delete Posting Image
      tags: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/Error.Show.v1.yaml
      operationId: delete-postings-postingId-images-imageId
      description: Delete a specific posting image.
components:
  schemas: {}
  securitySchemes:
    Token - 1:
      type: http
      scheme: bearer
      description: 'Token in header starting with "Bearer" (e.g.: "Bearer 59a371548...").'
security:
  - Token - 1: []
